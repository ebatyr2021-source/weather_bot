import io
import logging
import requests
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# üîë –¢–æ–∫–µ–Ω—ã
TOKEN = "8265923232:AAEukdI-Xm3r7tPOZke3EZ1bT-pGbF-0Jbs"
API_KEY = "88f8b680942555d9d07778f85df0f485"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s %(levelname)s %(message)s", level=logging.INFO)
logger = logging.getLogger("weather-bot")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã —Å OpenWeatherMap
def fetch_weather(city="Temirtau", api_key=API_KEY):
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={api_key}&units=metric&lang=ru"
    r = requests.get(url, timeout=15)
    r.raise_for_status()
    data = r.json()
    return data

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
def plot_weather(data):
    times = [item["dt_txt"] for item in data["list"][:16]]  # –ø–µ—Ä–≤—ã–µ ~2 –¥–Ω—è (—à–∞–≥ 3 —á–∞—Å–∞)
    temps = [item["main"]["temp"] for item in data["list"][:16]]

    fig, ax = plt.subplots(figsize=(10,5), dpi=120)
    ax.plot(times, temps, marker="o")
    ax.set_xlabel("–í—Ä–µ–º—è")
    ax.set_ylabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C")
    ax.set_title("–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –¢–µ–º–∏—Ä—Ç–∞—É (OpenWeatherMap)")
    plt.xticks(rotation=45)
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    plt.close(fig)
    buf.seek(0)
    return buf

# –ö–æ–º–∞–Ω–¥–∞ /forecast
async def forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = fetch_weather("Temirtau")
    except Exception as e:
        logger.exception(e)
        return await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã.")

    img = plot_weather(data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã
    forecast_text = "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –¢–µ–º–∏—Ä—Ç–∞—É:\n\n"
    for item in data["list"][:5]:  # –ø–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π (15 —á–∞—Å–æ–≤)
        dt = item["dt_txt"]
        temp = item["main"]["temp"]
        desc = item["weather"][0]["description"]
        forecast_text += f"{dt}: {temp:.1f}¬∞C, {desc}\n"

    await update.message.reply_photo(photo=img, caption=forecast_text)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç –¥–ª—è –¢–µ–º–∏—Ä—Ç–∞—É üå§\n"
        "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /forecast, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã."
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("forecast", forecast))
    app.run_polling()

if __name__ == "__main__":
    main()